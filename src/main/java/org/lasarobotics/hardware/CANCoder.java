// Copyright (c) LASA Robotics and other contributors
// Open Source Software; you can modify and/or share it under the terms of
// the MIT license file in the root directory of this project.

package org.lasarobotics.hardware;

import org.littletonrobotics.junction.AutoLog;
import org.littletonrobotics.junction.Logger;

import com.ctre.phoenix.ErrorCode;
import com.ctre.phoenix.sensors.CANCoderStatusFrame;
import com.ctre.phoenix.sensors.SensorTimeBase;

/** CTRE CANCoder */
public class CANCoder implements LoggableHardware, AutoCloseable {
  /** CANCoder ID */
  public static class ID {
    public final String name;
    public PhoenixCANBus bus;
    public final int deviceID;

    /**
     * CANCoder ID
     * @param name Device name for logging
     * @param deviceID CAN ID
     */
    public ID(String name, int deviceID) {
      this.name = name;
      this.deviceID = deviceID;
    }
  }

  @AutoLog
  public static class CANCoderInputs {
    public double absolutePosition = 0.0;
    public double relativePosition = 0.0;
    public double velocity = 0.0;
  }

  private com.ctre.phoenix.sensors.CANCoder m_canCoder;

  private ID m_id;
  private CANCoderInputsAutoLogged m_inputs;

  public CANCoder(ID id) {
    this.m_id = id;
    this.m_canCoder = new com.ctre.phoenix.sensors.CANCoder(m_id.deviceID, m_id.bus.name);
  }

   /**
     * Gets the absolute position of the sensor.
     * The absolute position may be unsigned (for example: [0,360) deg), or signed (for example: [-180,+180) deg).  This is determined by a configuration.  The default selection is unsigned.
     * The units are determined by the coefficient and unit-string configuration params, default is degrees.
     * Note: this signal is not affected by calls to SetPosition().
     * @return The position of the sensor.
     */
  private double getAbsolutePosition() {
    return m_canCoder.getAbsolutePosition();
  }

  /**
   * Gets the position of the sensor.  This may be relative or absolute depending on configuration.
   * The units are determined by the coefficient and unit-string configuration params, default is degrees.
   * @return The position of the sensor.
   */
  private double getRelativePosition() {
    return m_canCoder.getPosition();
  }

  /**
   * Gets the velocity of the sensor.
   * The units are determined by the coefficient and unit-string configuration params, default is degrees per second.
   * @return The Velocity of the sensor.
   */
  private double getVelocity() {
    return m_canCoder.getVelocity();
  }

  /**
   * Gets the velocity of the sensor.
   * The units are determined by the coefficient and unit-string configuration params, default is degrees per second.
   * @return The Velocity of the sensor.
   */
  private void updateInputs() {
    m_inputs.absolutePosition = getAbsolutePosition();
    m_inputs.relativePosition = getRelativePosition();
    m_inputs.velocity = getVelocity();
  }

  /**
   * Call this method periodically
   */
  @Override
  public void periodic() {
    updateInputs();
    Logger.processInputs(m_id.name, m_inputs);
  }

  /**
   * Get latest sensor input data
   * @return Latest sensor data
   */
  @Override
  public CANCoderInputsAutoLogged getInputs() {
    return m_inputs;
  }

  /**
   * Get device ID
   * @return Device ID
   */
  public ID getID() {
    return m_id;
  }

 /**
   * Choose what units you want the API to get/set.  This also impacts the units displayed in Self-Test in Tuner.
   * Depending on your mechanism, you may want to scale rotational units (deg, radians, rotations), or scale to a distance (inches, centimeters).
   * @param sensorCoefficient
   *            Scalar to multiply the CANCoder's native 12-bit resolute sensor. Defaults to 0.087890625 to produce degrees.
   * @param unitString
   *            String holding the unit to report in.  This impacts all routines (except for ConfigMagnetOffset) and the self-test in Tuner.
   *            The string value itself is arbitrary.  The max number of letters will depend on firmware versioning, but generally CANCoder
   *            supports up to eight letters.  However, common units such as "centimeters" are supported explicitly despite exceeding the eight-letter limit.
   *			      Default is "deg"
   * @param sensorTimeBase
   *            Desired denominator to report velocity in.  This impacts GetVelocity and the reported velocity in self-test in Tuner.
   *            Default is "Per Second".
   * @return Error Code generated by function. 0 indicates no error.
   */
  public ErrorCode configFeedbackCoefficient(double sensorCoefficient, String unitString, SensorTimeBase sensorTimeBase) {
    return m_canCoder.configFeedbackCoefficient(sensorCoefficient, unitString, sensorTimeBase);
  }

  /**
   * Sets the position of the sensor to match the magnet's "Absolute Sensor".
   * The units are determined by the coefficient and unit-string configuration params, default is degrees.
   * @return ErrorCode generated by function. 0 indicates no error.
   */
  public ErrorCode setPositionToAbsolute() {
    return m_canCoder.setPositionToAbsolute();
  }

  /**
   * Sets the position of the sensor to specified value
   * The units are determined by the coefficient and unit-string configuration params, default is degrees.
   * @param position Position to reset to
   * @return ErrorCode generated by function. 0 indicates no error.
   */
  public ErrorCode resetPosition(double position) {
    return m_canCoder.setPosition(position);
  }

 /**
   * Sets the position of the sensor to zero
   * The units are determined by the coefficient and unit-string configuration params, default is degrees.
   * @return ErrorCode generated by function. 0 indicates no error.
   */
  public ErrorCode resetPosition() {
    return resetPosition(0.0);
  }

  /**
   * Configures all persistent settings to defaults (overloaded so timeoutMs is 50 ms).
   *
   * @return Error Code generated by function. 0 indicates no error.
   */
  public ErrorCode configFactoryDefault() {
    return m_canCoder.configFactoryDefault();
  }

	/**
	 * Sets the period of the given status frame.
	 *
	 * @param statusFrame
	 *            Frame whose period is to be changed.
	 * @param periodMs
	 *            Period in ms for the given frame.
	 * @return Error Code generated by function. 0 indicates no error.
	 */
  public ErrorCode setStatusFramePeriod(CANCoderStatusFrame statusFrame, int periodMs) {
    return m_canCoder.setStatusFramePeriod(statusFrame, periodMs);
  }

  @Override
  public void close() {
    m_canCoder = null;
  }
}
