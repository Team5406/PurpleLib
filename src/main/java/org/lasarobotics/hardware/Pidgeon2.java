// Copyright (c) LASA Robotics and other contributors
// Open Source Software; you can modify and/or share it under the terms of
// the MIT license file in the root directory of this project.

package org.lasarobotics.hardware;

import org.lasarobotics.utils.GlobalConstants;
import org.littletonrobotics.junction.AutoLog;
import org.littletonrobotics.junction.Logger;

import com.ctre.phoenix.ErrorCode;
import com.ctre.phoenix.sensors.Pigeon2.AxisDirection;
import com.ctre.phoenix.sensors.PigeonIMU_ControlFrame;
import com.ctre.phoenix.sensors.PigeonIMU_StatusFrame;
import com.ctre.phoenix.sensors.WPI_Pigeon2;

import edu.wpi.first.math.geometry.Rotation2d;

/** CTRE Pidgeon 2.0 */
public class Pidgeon2 implements LoggableHardware, AutoCloseable {
  /** Pidgeon ID */
  public static class ID {
    public final String name;
    public final PhoenixCANBus bus;
    public final int deviceID;

    /**
     * Pidgeon2 ID
     * @param name Device name for logging
     * @param bus CAN bus
     * @param deviceID CAN ID
     */
    public ID(String name, PhoenixCANBus bus, int deviceID) {
      this.name = name;
      this.bus = bus;
      this.deviceID = deviceID;
    }
  }

  /**
   * Pigeon sensor inputs
   */
  @AutoLog
  public static class Pidgeon2Inputs {
    public double pitchAngle = 0.0;
    public double yawAngle = 0.0;
    public double rollAngle = 0.0;
    public double yawRate = 0.0;
    public Rotation2d rotation2d = GlobalConstants.ROTATION_ZERO;
  }

  private WPI_Pigeon2 m_pidgeon;

  private ID m_id;
  private Pidgeon2InputsAutoLogged m_inputs;

  public Pidgeon2(ID id) {
    this.m_id = id;
    this.m_pidgeon = new WPI_Pigeon2(id.deviceID, id.bus.name);
  }

  /**
	 * Get the pitch from the Pigeon
	 * @return Pitch
	 */
  private double getPitch() {
    return m_pidgeon.getPitch();
  }

  /**
   * Returns the heading of the robot in degrees.
   * <p>
   * The angle increases as the Pigeon 2 turns clockwise when looked
   * at from the top. This follows the NED axis convention.
   * <p>
   * The angle is continuous; that is, it will continue from 360 to
   * 361 degrees. This allows for algorithms that wouldn't want to
   * see a discontinuity in the gyro output as it sweeps past from
   * 360 to 0 on the second time around.
   *
   * @return The current heading of the robot in degrees
   */
  private double getAngle() {
    return m_pidgeon.getAngle();
  }

  /**
   * Returns the heading of the robot as a {@link Rotation2d}.
   * <p>
   * The angle increases as the Pigeon 2 turns counterclockwise when
   * looked at from the top. This follows the NWU axis convention.
   * <p>
   * The angle is continuous; that is, it will continue from 360 to
   * 361 degrees. This allows for algorithms that wouldn't want to
   * see a discontinuity in the gyro output as it sweeps past from
   * 360 to 0 on the second time around.
   *
   * @return The current heading of the robot as a {@link Rotation2d}
   */
  private Rotation2d getRotation2d() {
    return m_pidgeon.getRotation2d();
  }

  /**
	 * Get the roll from the Pigeon
	 * @return Roll
	 */
  private double getRoll() {
    return m_pidgeon.getRoll();
  }

  /**
   * Return the rate of rotation of the yaw (Z-axis) gyro, in degrees per second.
   *<p>
   * The rate is based on the most recent reading of the yaw gyro angle.
   *<p>
   * @return The current rate of change in yaw angle (in degrees per second)
   */
  private double getRate() {
    return m_pidgeon.getRate();
  }


  /**
   * Update Pidgeon input readings
   */
  private void updateInputs() {
    m_inputs.pitchAngle = getPitch();
    m_inputs.yawAngle = getAngle();
    m_inputs.rollAngle = getRoll();
    m_inputs.yawRate = getRate();
    m_inputs.rotation2d = getRotation2d();
  }

  /**
   * Call this method periodically
   */
  @Override
  public void periodic() {
    updateInputs();
    Logger.processInputs(m_id.name, m_inputs);
  }

  /**
   * Get latest sensor input data
   * @return Latest sensor data
   */
  @Override
  public Pidgeon2InputsAutoLogged getInputs() {
    return m_inputs;
  }

  /**
   * Get device ID
   * @return Device ID
   */
  public ID getID() {
    return m_id;
  }

  /**
   * Configures all persistent settings to defaults (overloaded so timeoutMs is 50 ms).
   *
   * @return Error Code generated by function. 0 indicates no error.
   */
  public ErrorCode configFactoryDefault() {
    return m_pidgeon.configFactoryDefault();
  }

	/**
	 * Configure the Mount Pose using the primary axis.
	 * This is useful if the Pigeon 2.0 is mounted straight, and you only
	 * need to describe what axis is forward and what axis is up.
	 *
	 * @param forward Axis that points forward from the robot
	 * @param up Axis that points up from the robot
	 * @return OK if successful, InvalidParamValue if both forward and up are of the same primary axis, otherwise config return.
	 */
  public ErrorCode configMountPose(AxisDirection forward, AxisDirection up) {
    return m_pidgeon.configMountPose(forward, up);
  }

	/**
	 * Sets the period of the given control frame.
	 *
	 * @param frame
	 *            Frame whose period is to be changed.
	 * @param periodMs
	 *            Period in ms for the given frame.
	 * @return Error Code generated by function. 0 indicates no error.
	 */
  public ErrorCode setControlFramePeriod(PigeonIMU_ControlFrame frame, int periodMs) {
    return m_pidgeon.setControlFramePeriod(frame, periodMs);
  }

	/**
	 * Sets the period of the given status frame.
	 *
	 * @param statusFrame
	 *            Frame whose period is to be changed.
	 * @param periodMs
	 *            Period in ms for the given frame.
	 * @return Error Code generated by function. 0 indicates no error.
	 */
  public ErrorCode setStatusFramePeriod(PigeonIMU_StatusFrame statusFrame, int periodMs) {
    return m_pidgeon.setStatusFramePeriod(statusFrame, periodMs);
  }

  /**
   * Resets the Pigeon 2 to a heading of zero.
   * <p>
   * This can be used if there is significant drift in the gyro,
   * and it needs to be recalibrated after it has been running.
   */
  public void reset() {
    m_pidgeon.reset();
  }

  @Override
  public void close() {
    m_pidgeon.close();
  }
}
